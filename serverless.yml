service: cake-ordering-system

plugins: 
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs18.x

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource:
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/ordersTable
    - Effect: Allow
      Action:
        - kinesis:PutRecord
      Resource:
        - arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    - Effect: Allow
      Action:
        - ses:sendEmail
      Resource:
        - "*"
      Condition:
        StringEquals:
          ses:FromAddress:
           - caylinnganymade@gmail.com
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:deliveryServiceQueue

functions:
  createOrder:
    handler: handler.createOrder
    events: 
      - http:
          path: /order
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  orderFulfillment:
    handler: handler.orderFulfillment
    events: 
      - http:
          path: /order/fulfillment
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  notifyCakeProducer:
    handler: handler.notifyCakeProducer
    events:
      - stream:
          arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    environment:
      region: ${self.provider.region}
      cakeProducerEmail: caylinnganymade@gmail.com
      orderingSytemEmail: caylinnganymade@gmail.com
      deliveryCompanyQueue:
        ref: deliveryServiceQueue
      orderTableName: ordersTable
    notifyDeliveryCompany:
      handler: handler.notifyDeliveryCompany
      events: 
        - sqs:
            arn:
              Fn::GetAtt
                - deliveryServiceQueue
                - Arn
            batchSize: 1
    orderDelivered:
      handler: handler.orderDelivered
      events: 
        - http:
          path: /order/delivered
          method: post
      environment:
        region: ${self:provider.region}
        orderTableName: ordersTable
        customerServiceQueue:
          ref: customerServiceQueue
    notifyCustomerService:
      handler: handler.notifyCustomerService
      events: 
        - sqs:
            arn:
              Fn::GetAtt
                - customerServiceQueue
                - Arn
            batchSize: 1

resources:
  Resources: 
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: order-events
        ShardCount: 1
    orderTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ordersTable
        AttributeDefinitions:
          - AttributeName: "orderId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
    deliveryServiceQueue:
        Type: AWS: :SQS:: Queue
        Properties:
          QueueName: deliveryServiceQueue
